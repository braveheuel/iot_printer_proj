#!/usr/bin/env python3
#
"""Print xkcd comics through python-escpos"""
import requests
from lxml import html
import argparse
import os
import io
from PIL import Image
import shutil
import pickle
from escpos import printer
import qrcode
import asyncio
import aiomas

CACHE_DIR = os.path.expanduser("~") + "/.cache/xkcd/"
PICKLE_FILENAME = "data.pickle"
PRINT_WIDTH = 384


class XkcdDataStructure(object):
    """Datastructure for pickling"""
    description = None
    name = None
    image_source = None
    instance = None
    directory = None
    image = None

    def get_image(self):
        """Return image data

        :returns: PIL image data
        """
        if self.image:
            return Image.frombytes(**self.image)

    def set_image(self, image):
        """Set the Image data"""
        self.image = dict(
            data=image.tobytes(),
            size=image.size,
            mode=image.mode
        )


def load(number="", overwrite=False):
    """Download a comic from website

    :param number: Specified number to download. Default: empty
    :param overwrite: Set this to re-download the a comic
    :returns: tuple of meta_data and bolean value if new
    """
    response = requests.get('http://xkcd.com/{0!s}'.format(number))
    parsed_body = html.fromstring(response.text)
    meta_data = XkcdDataStructure()
    meta_data.description = parsed_body.xpath(
        '//*[@id="comic"]//img/@title')[0].__str__()
    meta_data.name = parsed_body.xpath(
        '//*[@id="comic"]//img/@alt')[0].__str__()
    meta_data.image_source = "http:{0!s}".format((parsed_body.xpath(
        '//*[@id="comic"]//img/@src')[0]))
    meta_data.instance = os.path.split(
        os.path.splitext(meta_data.image_source)[0])[1]
    meta_data.directory = "{0!s}{1!s}".format(CACHE_DIR, meta_data.instance)
    is_new = True

    if os.path.isdir(meta_data.directory) and overwrite:
        print("Already downloaded {0!s}, removing first...".format(meta_data.instance))
        shutil.rmtree(meta_data.directory)

    if os.path.isdir(meta_data.directory):
        print("Already downloaded: {0!s}".format(meta_data.instance))
        print("Using pickled variant")
        meta_data = _load_from_file(meta_data.directory)
        is_new = False
    else:
        os.makedirs(meta_data.directory)
        image = _download_image(meta_data)
        _convert_image(image, meta_data)
        _save_meta_data(meta_data)

    return (meta_data, is_new)

def _save_meta_data(data):
    """Save the data to a file

    :param data: data to be written to file
    """
    with open("{0!s}{1!s}{2!s}".format(data.directory, os.sep, PICKLE_FILENAME),
              "wb") as outfile:
        pickle.dump(data, outfile)

def _convert_image(image, data):
    """Convert specified image

    :param image: Image to edit
    :param data: data to edit
    """
    # Rotate if width > height (always have stripe)
    if image.size[0] > image.size[1]:
        image = image.rotate(270, expand=1)

    # Resize
    if image.size[0] <= 1.5*PRINT_WIDTH:
        ratio = float(PRINT_WIDTH) / float(image.size[0])
        new_height = int(float(image.size[1])*float(ratio))
        image = image.resize((PRINT_WIDTH, new_height))
    else:
        # Create QR code
        qr = qrcode.QRCode()
        qr.add_data(data.image_source)
        image = qr.make_image(size=PRINT_WIDTH)._img
        image = image.resize((PRINT_WIDTH, PRINT_WIDTH))

    # Dither
    converted_image = image.convert("1", dither=Image.FLOYDSTEINBERG)
    converted_image.save("{0!s}{1!s}{2!s}".format(data.directory, os.sep,
                                                  "converted.png"), "PNG")
    data.set_image(converted_image)

def _download_image(data):
    """Retrieve image

    :param data: Specified data to download
    :returns: Downloaded image
    :raises Exception: Raised if request can't be done.
    """
    print("Downloading image...")
    url2retrieve = data.image_source
    requested = requests.get(url2retrieve)
    if not requested.status_code == 200:
        raise Exception("Could not retrieve image! Status code {0:d}".format(
            requested.status_code))
    raw_image = Image.open(io.BytesIO(requested.content))
    raw_image.save("{0!s}{1!s}{2!s}".
                   format(data.directory, os.sep, "image.png"), "PNG")
    return raw_image


def _load_from_file(path):
    """Load pickeled data from file

    :param path: Filename to load from
    :returns: Data retrieved from pickle file
    """
    with open("{0!s}{1!s}{2!s}".format(path, os.sep,
                                       PICKLE_FILENAME), "rb") as infile:
        pckl = pickle.load(infile)
    return pckl

async def _final_print(data):
    rpc_con = await aiomas.rpc.open_connection(('raspberrypi', 5555), codec=aiomas.MsgPack)
    try:
        session = await rpc_con.remote.start_session()
        await rpc_con.remote.raw_data(session, data)
        await rpc_con.remote.final_print(session)
    except Exception as e:
        print("Error occurred!", e)
    finally:
        await rpc_con.remote.close_session(session)
        await rpc_con.close()

def print_data(data):
    """Print the specified data

    :param data: Data to print
    """
    escpos_printer = printer.Dummy()
    escpos_printer.hw("init")
    escpos_printer.set(align="center", bold=True)
    escpos_printer.block_text(data.name, columns=16)
    escpos_printer.text("\n")
    escpos_printer.set(align="left", bold=False)
    escpos_printer.image(data.get_image())
    escpos_printer.text("\n")
    escpos_printer.block_text(data.description, columns=32)
    escpos_printer.print_and_feed(4)
    aiomas.run(_final_print(escpos_printer.output))


if __name__ == "__main__":
    if not os.path.exists(CACHE_DIR):
        os.makedirs(CACHE_DIR)
    parser = argparse.ArgumentParser(
        description='Load image and description of xkcd')
    parser.add_argument('comic_number',
                        metavar="number",
                        type=str,
                        help="Number of comic to load",
                        default="", nargs="*")
    parser.add_argument('-f', '--overwrite',
                        action='store_true',
                        help="Overwrite if already exists")
    parser.add_argument('-p', '--print_if_new',
                        action='store_true',
                        help="Print only if new")
    args = parser.parse_args()
    (data, new_comic) = load("" if args.comic_number == ""
                             else args.comic_number[0], args.overwrite)
    if (new_comic and args.print_if_new) or not args.print_if_new:
        print_data(data)
    else:
        print("Not printing, because of argument print_if_new")
